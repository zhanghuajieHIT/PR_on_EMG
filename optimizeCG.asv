%% 10-fold
clc;
clear;
data1=load('E:\实验\Delsys数据采集\实验数据\14种动作模式\zhj20161123\无归一化预处理后，overlap为100,len为300\a1.mat');
data2=load('E:\实验\Delsys数据采集\实验数据\14种动作模式\zhj20161123\无归一化预处理后，overlap为100,len为300\a2.mat');
data3=load('E:\实验\Delsys数据采集\实验数据\14种动作模式\zhj20161123\无归一化预处理后，overlap为100,len为300\a3.mat');
data4=load('E:\实验\Delsys数据采集\实验数据\14种动作模式\zhj20161123\无归一化预处理后，overlap为100,len为300\a4.mat');
data.DataStructure.rawEMG=cat(3,data1.DataStructure.rawEMG,data2.DataStructure.rawEMG,data3.DataStructure.rawEMG,data4.DataStructure.rawEMG);
label.DataStructure.labelID=cat(1,data1.DataStructure.labelID,data2.DataStructure.labelID,data3.DataStructure.labelID,data4.DataStructure.labelID);
label=label.DataStructure.labelID;
%% feature extrated  
len=size(data.DataStructure.rawEMG,3);
feature=zeros(len,8);
fun='feature_RMS';%可以修改提取特征的函数
for i=1:len
    feature(i,:)=feval(fun,data.DataStructure.rawEMG(:,:,i)');
end
%归一化
feature=mapminmax(feature',0,5)';

totalNum=length(feature);
num=fix(totalNum/10);%10-fold
index=randperm(totalNum);

for i=1:10
    emgData{i}=
end
trial1=feature(index(1:num),:);
trial1Label=label(index(1:num),:);
trial2=feature(index(num+1:2*num),:);
trial2Label=label(index(num+1:2*num),:);
trail3=feature(index(2*num+1:3*num),:);
trial3Label=label(index(2*num+1:3*num),:);
trail4=feature(index(3*num+1:4*num),:);
trial4Label=label(index(3*num+1:4*num),:);
emgData{1}=trial1;
emgLabel{1}=trial1Label;
emgData{2}=trial2;
emgLabel{2}=trial2Label;
emgData{3}=trail3;
emgLabel{3}=trial3Label;
emgData{4}=trail4;
emgLabel{4}=trial4Label;

%% classify
numIndex=1:10;
Acc=[];
for n=1:7
    for m=1:7
        result=[];
        para=['-c ',num2str(0.1*2^n),' -g ',num2str(0.1*2^m)];%c:6.4;g:0.4
        for i=1:10
            testData=emgData{i};
            testLabel=emgLabel{i};
            temp=numIndex;
            temp(i)=[];
            trainData=cat(1,emgData{temp(1)},emgData{temp(2)},emgData{temp(3)});
            trainLabel=cat(1,emgLabel{temp(1)},emgLabel{temp(2)},emgLabel{temp(3)});
            model = libsvmtrain(trainLabel, trainData, para);
            [predict_label, acc,~] = libsvmpredict(testLabel, testData, model);
            result=cat(1,result,acc(1));
        end
        Acc=cat(1,Acc,mean(result));
              
    end
    
end
[maxValue,loc]=max(Acc);
m=mod(loc,7);
n=fix(loc/7);

